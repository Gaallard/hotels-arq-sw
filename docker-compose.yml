services:
  mysql:
    image: mysql:latest
    container_name: mysql-container
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: users
      MYSQL_PASSWORD: root
    networks:
      - app-network

  memcached:
    image: memcached:latest
    container_name: memcached-container
    ports:
      - "11211:11211"
    networks:
      - app-network

  mongo:
    image: mongo:4
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbit
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: root
      RABBITMQ_DEFAULT_PASS: root
    networks:
      - app-network

  solr:
    image: solr:latest
    container_name: solr
    ports:
      - "8983:8983"
    volumes:
      - ./backend/search-api/solr-config:/opt/solr/server/solr/hotels
    command: solr-create -c hotels
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx-container
    ports:
      - "8081:8081" # Exponer NGINX en el puerto 8081
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf # Montar la configuraci√≥n de NGINX
    depends_on:
      - hotels-api1
      - hotels-api2
      - hotels-api3
    networks:
      - app-network

  

  users-api:
    image: users-api:latest
    container_name: users-api-container
    build:
      context: ./backend/users-api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    command: /bin/sh -c "sleep 10 && go run main.go"
    depends_on:
      - memcached
      - mysql
    networks:
      - app-network



  hotels-api1:
    image: hotels-api:latest
    container_name: hotels-api-container-1
    build:
      context: ./backend/hotels-api
      dockerfile: Dockerfile
    ports:
      - "8082:8081" # Mapeo interno (instancia 1)
    command: /bin/sh -c "sleep 10 && go run main.go"
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - app-network

  hotels-api2:
    image: hotels-api:latest
    container_name: hotels-api-container-2
    build:
      context: ./backend/hotels-api
      dockerfile: Dockerfile
    ports:
      - "8085:8081" # Mapeo interno (instancia 2)
    command: /bin/sh -c "sleep 10 && go run main.go"
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - app-network

  hotels-api3:
    image: hotels-api:latest
    container_name: hotels-api-container-3
    build:
      context: ./backend/hotels-api
      dockerfile: Dockerfile
    ports:
      - "8086:8081" # Mapeo interno (instancia 3)
    command: /bin/sh -c "sleep 10 && go run main.go"
    depends_on:
      - mongo
      - rabbitmq
    networks:
      - app-network

#  hotels-api:
#    image: hotels-api:latest
#    container_name: hotels-api-container
#    build:
#      context: ./backend/hotels-api
#      dockerfile: Dockerfile
#    ports:
#      - "8081:8081"
#    command: /bin/sh -c "sleep 10 && go run main.go"
#    depends_on:
#      - mongo
#      - rabbitmq
#    networks:
#      - app-network

  reserva-api:
    image: reserva-api:latest
    container_name: reserva-api-container
    build:
      context: ./backend/reserva-api
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    command: /bin/sh -c "sleep 10 && go run main.go"
    depends_on:
      - mysql
    networks:
      - app-network

  search-api:
    image: search-api:latest
    container_name: search-api-container
    build:
      context: ./backend/search-api
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    command: /bin/sh -c "sleep 10 && go run main.go"
    depends_on:
      - rabbitmq
      - solr
    networks:
      - app-network

#  frontend:
#    image: frontend:latest
#x    container_name: frontend-container
#    build:
#      context: ./frontend
#      dockerfile: Dockerfile
#    ports:
#      - "3000:80"
#    depends_on:
#      - hotels-api
#      - users-api
#      - reserva-api
#      - search-api
#    networks:
#      - app-network

networks:
  app-network:
    driver: bridge